// Author: Adam Henry, adlhenry@ucsc.edu

SYNOPSIS
myshell - A simple shell

    Supports
        piped commands with optional file redirection
            - <command> <options> [ | <command> <options> ...] [><] file
        command which terminates shell
            - exit
    All commands may or may not specify <options>.

DATA
lex.l
    _numargs - maximum number of characters per line of input to the shell
               is (_numargs-1)
    _args - the array of character strings used for storing commands,
            options, and special characters
    _argcount - the number of arguments read so far
    
myshell.c
    exit_status - tracks the shell exit status
    execname - the name of the program file (myshell)
    bachar - tracks use of unsupported special characters: ()&;*
    infile/outfile - tracks the filenames used for file redirection
    argvs - contains the parameter lists for commands
    pipes - contains the pipe file descriptors used for command piping
    cmdi - index of the last command parameter list in argvs
    
FUNCTIONS
lex.l
    getLine
        inputs - stdin command line arguments to the shell
        outputs - a pointer to an array of commands, options, and special characters
        assumptions - the number of commands, options, and special characters does not
                      exceed 256 per line
        
myshell.c
    errprintf
        inputs - a non-null pointer to a character string
        outputs - a warning to stderr
        assumptions - character string is non-null
    
    print_prompt
        inputs - none
        outputs - the "$> " prompt to stdout
        assumptions - print_prompt called before read_command
    
    read_command
        inputs - a pointer to a character string returned by getLine()
        outputs - populates the argvs array with arrays of string characters
                  representing the argv's of separate commands
                  and sets cmdi to the index of the commands in argvs
                  also sets global character strings outfile/infile to the
                  names of files following the redirection symbols
                  sets badchar to true if an unsupported special character is found
        assumptions - the character array returned by getLine() is non-null
        
    redirect_in
        inputs - global character string infile
        outputs - will close stdin and open a file using the same
                  file descriptor
        assumptions - infile contains the filename to redirect from
        
    redirect_out
        inputs - global character string outfile
        outputs - will close stdout and open a file using the same
                  file descriptor
        assumptions - outfile contains the filename to redirect to
        
    connect_pipe
        inputs - pointer to an int array containing a pipe descriptor and an int
        outputs - closes the unused end of the pipe and connects the other end
                  to either stdin or stdout
        assumptions - the pointer to the int array is non-null, the int is either 0 or 1
        
    open_pipes
        inputs - the global pipes integer pointer array
        outputs - populates the pipes array with n-1 pipes for n commands in argvs
        assumptions - cmdi is the index of the last command in argvs
        
    close_pipes
        inputs - two ints
        outputs - closes all pipe file descriptors in the pipes global array
                  except for the pipes at the indexes defined by the two input ints
        assumptions - pipes global array contains pipes opened by open_pipes()
        
    exec_pipe
        inputs - a string pointer, a pointer to a string array, and an int
        outputs - fork() if child: set pipe connections, execute the command
                  and its parameters
        assumptions - both input pointers are non-null, and the int specifies
                      the order of pipe connections
    
    execute_command
        inputs - global cmdi and argvs
        outputs - if input was empty or an unsupported character was entered; return
                  check for the exit command -> throw an error for improper syntax
                  open the pipes
                  run the command pipeline
                  close the pipes
                  wait until all commands have terminated                 
        assumptions - cmdi was set to the index of the last command paramter list in argvs
    
    main
        inputs - int and pointer to array of strings
        outputs - sets global execname to the name of the program
                  warning message if unsupported command line arguments are 
                  specified to myshell
                  runs the main loop for myshell
                    print prompt
                    read command
                    execute command
                  returns 0 if successful and 1 if an error occurred
        assumptions - int is count of strings in the string array and the string
                      array is a non-null pointer
